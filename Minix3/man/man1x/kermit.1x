.so mnx.mac
.TH KERMIT 1x
.CD "kermit \(en transfer a file using the kermit protocol"
.SX "kermit"
.FL "\fR(many)"
.EY "kermit" "Start kermit"
.PP
This is a slightly lobotomized \fIkermit\fR.
The help command, the script facility, and the automatic dial support
have been removed.  
The ? and ESC commands still work, so there is still reasonable built-in help.
The only V7 \fIkermit\fR feature that does not work is the ability to see
whether there are input characters waiting.  This means that you will not
be able to ask for status during a file transfer (though
this is not critical, because \fIkermit\fR prints a dot every so often and
other special characters whenever there is an error or timeout).
.PP
Start \fIkermit\fR, and then type the following to open a 2400 baud session,
for example:
.HS
.nf
.Cx "set line /dev/tty1"
.Cx "set speed 2400"
.Cx "connect"
.HS
.fi
(It is more convenient if you put these commands in \fI.kermrc\fR in your
home directory, so that they get done automatically whenever you
run \fIkermit\fR.)  This will connect you to the modem or whatever on
the serial port.  Now log into the other system.
.PP
When you want to transfer files, run \fIkermit\fR on the other system.
To it, type
.HS
.Cx "server"
.HS
This puts its \fIkermit\fR into a sort of \*(OQslave mode\*(CQ where it expects
commands from the \fIkermit\fR running on your \s-2MINIX\s0 system.  Now come back
to the command level on \s-2MINIX\s0 \fIkermit\fR, by typing the escape character
followed by \fIc\fR.  (\fIKermit\fR will tell you 
the current escape character when
you do the connect command.)  At this point you can issue various
commands. 
Your \fIkermit\fR will coordinate things with \fIkermit\fR on the other
machine so that you only have to type commands at one end.  Common
commands are
.HS
.Cx "get \fI\s+2filename\fP\s0"
.br
.Cx "put \fI\s+2filename\fP\s0"
.br
.Cx "remote \fI\s+2dir\fP\s0"
.HS
\fRFilenames can include wildcards.  By default, \fIkermit\fR works in a
system-independent, text mode.  (In effect it assumes that the
whole world is \s-2MS-DOS\s0 and converts end of line and file names
accordingly.)  To send binary files, you will want to type
.HS
.Cx "set file type bin"
.HS
on both ends before starting any transfers.  This disables
CR LF to newline conversion.  If both of your systems are some
flavor of \s-2UNIX\s0, you might as well put this in \fI.kermrc\fR on both
ends and run in binary mode all the time.  Also, if both systems
are \s-2UNIX\s0 it is recommended that you use
.HS
.Cx "set file name lit"
.HS
on both ends.  This causes it to keep file names unchanged,
rather than mapping to legal \s-2MS-DOS\s0 names.
.PP
Here is a typical \fI.kermrc\fR for use on
.MX :
.HS
.nf
.Cx "set line /dev/tty1"
.Cx "set speed 1200"
.Cx "set esc 29"
.Cx "set file type bin"
.Cx "set file name lit"
.Cx "set retry 90"
.Cx "set prompt MINIX kermit>"
.Cx "connect"
.fi
.PP
On the other end of the line, for example, the host at your local computer
center to which you want to transfer files, a typical profile might be:
.HS
.nf
.Cx "set rec packet 1000"
.Cx "set fil name lit"
.Cx "set fil type bin"
.Cx "server"
.fi
.HS
.PP
\fIKermit\fR has many other options and features.  For a pleasant and
highly readable description of it, see the following book:
.HS
.in +0.25i
.nf
Title: Kermit: A File Transfer Protocol
Author: Frank da Cruz
Publisher: Digital Press
Date: 1987
ISBN: 0-932376-88
.fi
.in -0.25i
.HS
.PP
For information about recent \fIkermit\fR developments, versions for other
systems, and so forth, please contact:
.nf
.HS
.in +0.25i
Christine M. Gianone
Manager, Kermit Development and Distribution
University Center for Computing Activities
Columbia University
612 West 115th Street
New York, N.Y. 10025
.in -0.25i
.HS
.fi
Over 400 versions of \fIkermit\fR are available, so it is likely there is one
for any computer your
.MX
system might want to talk to.
Columbia University also publishes a newsletter about \fIkermit\fR that can be
requested from the above address.
